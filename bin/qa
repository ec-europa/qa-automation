#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use QualityAssurance\Component\Console\Command\CheckCodingStandardsCommand;
use QualityAssurance\Component\Console\Command\CheckBehatCoverageCommand;
use QualityAssurance\Component\Console\Command\CheckStarterkitCommand;
use QualityAssurance\Component\Console\Command\DiffUpdateHooksCommand;
use QualityAssurance\Component\Console\Command\DiffMakeFilesCommand;
use QualityAssurance\Component\Console\Command\ReviewThisCommand;
use QualityAssurance\Component\Console\Command\ReviewThemeCommand;
use QualityAssurance\Component\Console\Command\ReviewFullCommand;
use QualityAssurance\Component\Console\Command\ScanCodingStandardsIgnoreCommand;
use QualityAssurance\Component\Console\Command\ScanCommentedCodeCommand;
use QualityAssurance\Component\Console\Command\ScanCronCommand;
use QualityAssurance\Component\Console\Command\ScanTodosCommand;
use QualityAssurance\Component\Console\Command\ScanPlatformProvidedCommand;
use QualityAssurance\Component\Console\Command\ScanThemeNameConflict;

if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
  require $autoload;
}

if (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
  require($autoload);
} elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
  require($autoload);
} else {
  fwrite(STDERR,
    'You must set up the project dependencies, run the following commands:'.PHP_EOL.
    'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
    'php composer.phar install'.PHP_EOL
  );
  exit(1);
}

$application = new Application('Quality Assurance', '@package_version@');
$commands = array();
$commands[] = new ReviewThisCommand();
$commands[] = new ReviewThemeCommand();
$commands[] = new ReviewFullCommand();
$commands[] = new CheckCodingStandardsCommand();
$commands[] = new CheckBehatCoverageCommand();
$commands[] = new ScanCodingStandardsIgnoreCommand();
$commands[] = new ScanCronCommand();
$commands[] = new ScanCommentedCodeCommand();
$commands[] = new ScanTodosCommand();
$commands[] = new ScanThemeNameConflict();
$commands[] = new CheckStarterkitCommand();
$commands[] = new ScanPlatformProvidedCommand();
$commands[] = new DiffUpdateHooksCommand();
$commands[] = new DiffMakeFilesCommand();
$application->addCommands($commands);
$application->run();